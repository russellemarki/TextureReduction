function[cbound] = rplotPDF(odf, varargin)
%RPLOTPDF will plot an mtex odf while working with subplots.
%
%    odf is the mtex odf object to be plotted
%    h are the projections to be used, 
%    
%    textHorz will label underneath the pole figures
%    textVert will label to the left of the pole figures
%    
%    FontSize will control the font size of the text
%
%    cbound is the color bounds to be used
%    There is the colormap defined later on in the script.  Change as necessary.  
%
%    
%    if you are struggling, use plotPDF instead.
% -------------------------------------------------------------------------
%    author:      Russell Marki
%    affiliation: Marko Knezevic, University of New Hampshire
%    email:       rem1022@wildcats.unh.edu

if mod(length(varargin), 2) == 1
    h = varargin{1};
    varargin = varargin(2:end);
else
    h = calcH(odf.CS);
end

p = inputParser;
addOptional(p, 'colorBound', [])
addOptional(p, 'textHorz', [])
addOptional(p, 'textVert', [])
addOptional(p, 'FontSize', 14)
addOptional(p, 'axisLabel', cell(1, 2))
addOptional(p, 'iColorBar', true)

parse(p,varargin{:})
cbound = p.Results.colorBound;
textHorz = p.Results.textHorz;
textVert = p.Results.textVert;
fontsz = p.Results.FontSize;
axisLabel = p.Results.axisLabel;
iColorBar = p.Results.iColorBar;

xAxis = getMTEXpref('xAxisDirection');

CS = odf.CS;

if iscell(h)
    h = cat(2, h{:});
end

%maximum and default values for the number of annotations on the colorbar
MAX_CBAR = 9;
CBAR = 6;

% mtex default
% cmap = WhiteJetColorMap;

% Labotex default?
% cmap = LaboTeXColorMap;

% TSL default
cmap = TSLColorMap;

Z = rcalcPDF(odf, h);


%correct for the direction of the X-Axis
if ischar(xAxis)
  el = (1-NWSE(xAxis))*pi/2;
else
  el = round(-xAxis / degree);
end

el = 0;%-pi/2;

% initialize the X and Y coordinates, as well as the intensities in Z
XX = cell(1, length(h));
YY = cell(1, length(h));

%center of each pole figure
XC = zeros(1, length(h) + 1);

for i = 1:length(h)
    [nR, ntheta] = size(Z(:, :, i));
    
    theta = linspace(2*pi, 0, ntheta) + pi/2 + el;
    R = linspace(0, 1, nR);
    
    rNorm = R/(max(R) - min(R)); %normalized radius [0,1]
    
    % transform data in polar coordinates to Cartesian coordinates.
    YY{i} = (rNorm)'*cos(theta);
    XX{i} = (rNorm)'*sin(theta);
    
    %Each center has to be more than 2 unit lengths away from another
    XC(i) = (i - 1)*2.2;
    
    XX{i} = XX{i} + XC(i);
end

XC(i + 1) = XC(i) + 1.5;

%set the color boundaries
if isempty(cbound)
    cmax = max(Z(:));
    cmin = min(Z(:));
    if cmax==cmin
        cmax = cmax + eps;
        cmin = cmin - eps;
    end
else
    cmin = cbound(1);
    cmax = cbound(2);
end

cbound = [cmin,cmax];

    
% I have a commented out cmap that extends the above cmap to 100 
% cmap = [0,0,1;0,0.00574747474747475,0.994212121212121;0,0.0114949494949495,0.988424242424242;0,0.0172424242424242,0.982636363636364;0,0.0229898989898990,0.976848484848485;0,0.0287373737373737,0.971060606060606;0,0.0344848484848485,0.965272727272727;0,0.0402323232323232,0.959484848484849;0,0.0459797979797980,0.953696969696970;0,0.0517272727272727,0.947909090909091;0,0.0574747474747475,0.942121212121212;0,0.0632222222222222,0.936333333333333;0,0.0689696969696970,0.930545454545455;0,0.0747171717171717,0.924757575757576;0,0.0804646464646465,0.918969696969697;0,0.0862121212121212,0.913181818181818;0,0.0919595959595960,0.907393939393939;0,0.0977070707070707,0.901606060606061;0,0.103454545454545,0.895818181818182;0,0.109202020202020,0.890030303030303;0,0.114949494949495,0.884242424242424;0,0.120696969696970,0.878454545454546;0,0.126444444444444,0.872666666666667;0,0.132191919191919,0.866878787878788;0,0.137939393939394,0.861090909090909;0,0.143686868686869,0.855303030303030;0,0.149434343434343,0.849515151515152;0,0.155181818181818,0.843727272727273;0,0.160929292929293,0.837939393939394;0,0.166676767676768,0.832151515151515;0,0.172424242424242,0.826363636363636;0,0.178171717171717,0.820575757575758;0,0.183919191919192,0.814787878787879;0,0.189666666666667,0.809000000000000;0,0.195414141414141,0.803212121212121;0,0.201161616161616,0.797424242424242;0,0.206909090909091,0.791636363636364;0,0.212656565656566,0.785848484848485;0,0.218404040404040,0.780060606060606;0,0.224151515151515,0.774272727272727;0,0.229898989898990,0.768484848484849;0,0.235646464646465,0.762696969696970;0,0.241393939393939,0.756909090909091;0,0.247141414141414,0.751121212121212;0,0.252888888888889,0.745333333333333;0,0.258636363636364,0.739545454545455;0,0.264383838383838,0.733757575757576;0,0.270131313131313,0.727969696969697;0,0.275878787878788,0.722181818181818;0,0.281626262626263,0.716393939393939;0,0.287373737373737,0.710606060606061;0,0.293121212121212,0.704818181818182;0,0.298868686868687,0.699030303030303;0,0.304616161616162,0.693242424242424;0,0.310363636363636,0.687454545454546;0,0.316111111111111,0.681666666666667;0,0.321858585858586,0.675878787878788;0,0.327606060606061,0.670090909090909;0,0.333353535353535,0.664303030303030;0,0.339101010101010,0.658515151515152;0,0.344848484848485,0.652727272727273;0,0.350595959595960,0.646939393939394;0,0.356343434343434,0.641151515151515;0,0.362090909090909,0.635363636363636;0,0.367838383838384,0.629575757575758;0,0.373585858585859,0.623787878787879;0,0.379333333333333,0.618000000000000;0,0.385080808080808,0.612212121212121;0,0.390828282828283,0.606424242424242;0,0.396575757575758,0.600636363636364;0,0.402323232323232,0.594848484848485;0,0.408070707070707,0.589060606060606;0,0.413818181818182,0.583272727272727;0,0.419565656565657,0.577484848484849;0,0.425313131313131,0.571696969696970;0,0.431060606060606,0.565909090909091;0,0.436808080808081,0.560121212121212;0,0.442555555555556,0.554333333333333;0,0.448303030303030,0.548545454545455;0,0.454050505050505,0.542757575757576;0,0.459797979797980,0.536969696969697;0,0.465545454545455,0.531181818181818;0,0.471292929292929,0.525393939393939;0,0.477040404040404,0.519606060606061;0,0.482787878787879,0.513818181818182;0,0.488535353535354,0.508030303030303;0,0.494282828282828,0.502242424242424;0,0.500030303030303,0.496454545454546;0,0.505777777777778,0.490666666666667;0,0.511525252525253,0.484878787878788;0,0.517272727272727,0.479090909090909;0,0.523020202020202,0.473303030303030;0,0.528767676767677,0.467515151515152;0,0.534515151515152,0.461727272727273;0,0.540262626262626,0.455939393939394;0,0.546010101010101,0.450151515151515;0,0.551757575757576,0.444363636363636;0,0.557505050505051,0.438575757575758;0,0.563252525252525,0.432787878787879;0,0.569000000000000,0.427000000000000;0.00142424242424242,0.573353535353535,0.422686868686869;0.00284848484848485,0.577707070707071,0.418373737373737;0.00427272727272727,0.582060606060606,0.414060606060606;0.00569696969696970,0.586414141414141,0.409747474747475;0.00712121212121212,0.590767676767677,0.405434343434343;0.00854545454545454,0.595121212121212,0.401121212121212;0.00996969696969697,0.599474747474747,0.396808080808081;0.0113939393939394,0.603828282828283,0.392494949494950;0.0128181818181818,0.608181818181818,0.388181818181818;0.0142424242424242,0.612535353535354,0.383868686868687;0.0156666666666667,0.616888888888889,0.379555555555556;0.0170909090909091,0.621242424242424,0.375242424242424;0.0185151515151515,0.625595959595960,0.370929292929293;0.0199393939393939,0.629949494949495,0.366616161616162;0.0213636363636364,0.634303030303030,0.362303030303030;0.0227878787878788,0.638656565656566,0.357989898989899;0.0242121212121212,0.643010101010101,0.353676767676768;0.0256363636363636,0.647363636363636,0.349363636363636;0.0270606060606061,0.651717171717172,0.345050505050505;0.0284848484848485,0.656070707070707,0.340737373737374;0.0299090909090909,0.660424242424242,0.336424242424242;0.0313333333333333,0.664777777777778,0.332111111111111;0.0327575757575758,0.669131313131313,0.327797979797980;0.0341818181818182,0.673484848484849,0.323484848484849;0.0356060606060606,0.677838383838384,0.319171717171717;0.0370303030303030,0.682191919191919,0.314858585858586;0.0384545454545455,0.686545454545455,0.310545454545455;0.0398787878787879,0.690898989898990,0.306232323232323;0.0413030303030303,0.695252525252525,0.301919191919192;0.0427272727272727,0.699606060606061,0.297606060606061;0.0441515151515152,0.703959595959596,0.293292929292929;0.0455757575757576,0.708313131313131,0.288979797979798;0.0470000000000000,0.712666666666667,0.284666666666667;0.0484242424242424,0.717020202020202,0.280353535353535;0.0498484848484848,0.721373737373737,0.276040404040404;0.0512727272727273,0.725727272727273,0.271727272727273;0.0526969696969697,0.730080808080808,0.267414141414141;0.0541212121212121,0.734434343434343,0.263101010101010;0.0555454545454545,0.738787878787879,0.258787878787879;0.0569696969696970,0.743141414141414,0.254474747474748;0.0583939393939394,0.747494949494949,0.250161616161616;0.0598181818181818,0.751848484848485,0.245848484848485;0.0612424242424242,0.756202020202020,0.241535353535354;0.0626666666666667,0.760555555555556,0.237222222222222;0.0640909090909091,0.764909090909091,0.232909090909091;0.0655151515151515,0.769262626262626,0.228595959595960;0.0669393939393939,0.773616161616162,0.224282828282828;0.0683636363636364,0.777969696969697,0.219969696969697;0.0697878787878788,0.782323232323232,0.215656565656566;0.0712121212121212,0.786676767676768,0.211343434343434;0.0726363636363636,0.791030303030303,0.207030303030303;0.0740606060606061,0.795383838383838,0.202717171717172;0.0754848484848485,0.799737373737374,0.198404040404040;0.0769090909090909,0.804090909090909,0.194090909090909;0.0783333333333333,0.808444444444444,0.189777777777778;0.0797575757575758,0.812797979797980,0.185464646464646;0.0811818181818182,0.817151515151515,0.181151515151515;0.0826060606060606,0.821505050505051,0.176838383838384;0.0840303030303030,0.825858585858586,0.172525252525253;0.0854545454545455,0.830212121212121,0.168212121212121;0.0868787878787879,0.834565656565657,0.163898989898990;0.0883030303030303,0.838919191919192,0.159585858585859;0.0897272727272727,0.843272727272727,0.155272727272727;0.0911515151515151,0.847626262626263,0.150959595959596;0.0925757575757576,0.851979797979798,0.146646464646465;0.0940000000000000,0.856333333333333,0.142333333333333;0.0954242424242424,0.860686868686869,0.138020202020202;0.0968484848484848,0.865040404040404,0.133707070707071;0.0982727272727273,0.869393939393939,0.129393939393939;0.0996969696969697,0.873747474747475,0.125080808080808;0.101121212121212,0.878101010101010,0.120767676767677;0.102545454545455,0.882454545454545,0.116454545454545;0.103969696969697,0.886808080808081,0.112141414141414;0.105393939393939,0.891161616161616,0.107828282828283;0.106818181818182,0.895515151515152,0.103515151515152;0.108242424242424,0.899868686868687,0.0992020202020202;0.109666666666667,0.904222222222222,0.0948888888888889;0.111090909090909,0.908575757575758,0.0905757575757576;0.112515151515152,0.912929292929293,0.0862626262626263;0.113939393939394,0.917282828282828,0.0819494949494950;0.115363636363636,0.921636363636364,0.0776363636363637;0.116787878787879,0.925989898989899,0.0733232323232324;0.118212121212121,0.930343434343434,0.0690101010101010;0.119636363636364,0.934696969696970,0.0646969696969696;0.121060606060606,0.939050505050505,0.0603838383838384;0.122484848484848,0.943404040404040,0.0560707070707071;0.123909090909091,0.947757575757576,0.0517575757575757;0.125333333333333,0.952111111111111,0.0474444444444445;0.126757575757576,0.956464646464647,0.0431313131313131;0.128181818181818,0.960818181818182,0.0388181818181818;0.129606060606061,0.965171717171717,0.0345050505050505;0.131030303030303,0.969525252525253,0.0301919191919192;0.132454545454545,0.973878787878788,0.0258787878787879;0.133878787878788,0.978232323232323,0.0215656565656566;0.135303030303030,0.982585858585859,0.0172525252525252;0.136727272727273,0.986939393939394,0.0129393939393940;0.138151515151515,0.991292929292929,0.00862626262626265;0.139575757575758,0.995646464646465,0.00431313131313132;0.141000000000000,1,0;0.146787878787879,1,0;0.152575757575758,1,0;0.158363636363636,1,0;0.164151515151515,1,0;0.169939393939394,1,0;0.175727272727273,1,0;0.181515151515152,1,0;0.187303030303030,1,0;0.193090909090909,1,0;0.198878787878788,1,0;0.204666666666667,1,0;0.210454545454545,1,0;0.216242424242424,1,0;0.222030303030303,1,0;0.227818181818182,1,0;0.233606060606061,1,0;0.239393939393939,1,0;0.245181818181818,1,0;0.250969696969697,1,0;0.256757575757576,1,0;0.262545454545455,1,0;0.268333333333333,1,0;0.274121212121212,1,0;0.279909090909091,1,0;0.285696969696970,1,0;0.291484848484848,1,0;0.297272727272727,1,0;0.303060606060606,1,0;0.308848484848485,1,0;0.314636363636364,1,0;0.320424242424242,1,0;0.326212121212121,1,0;0.332000000000000,1,0;0.337787878787879,1,0;0.343575757575758,1,0;0.349363636363636,1,0;0.355151515151515,1,0;0.360939393939394,1,0;0.366727272727273,1,0;0.372515151515151,1,0;0.378303030303030,1,0;0.384090909090909,1,0;0.389878787878788,1,0;0.395666666666667,1,0;0.401454545454545,1,0;0.407242424242424,1,0;0.413030303030303,1,0;0.418818181818182,1,0;0.424606060606061,1,0;0.430393939393939,1,0;0.436181818181818,1,0;0.441969696969697,1,0;0.447757575757576,1,0;0.453545454545455,1,0;0.459333333333333,1,0;0.465121212121212,1,0;0.470909090909091,1,0;0.476696969696970,1,0;0.482484848484848,1,0;0.488272727272727,1,0;0.494060606060606,1,0;0.499848484848485,1,0;0.505636363636364,1,0;0.511424242424242,1,0;0.517212121212121,1,0;0.523000000000000,1,0;0.528787878787879,1,0;0.534575757575758,1,0;0.540363636363636,1,0;0.546151515151515,1,0;0.551939393939394,1,0;0.557727272727273,1,0;0.563515151515151,1,0;0.569303030303030,1,0;0.575090909090909,1,0;0.580878787878788,1,0;0.586666666666667,1,0;0.592454545454545,1,0;0.598242424242424,1,0;0.604030303030303,1,0;0.609818181818182,1,0;0.615606060606061,1,0;0.621393939393939,1,0;0.627181818181818,1,0;0.632969696969697,1,0;0.638757575757576,1,0;0.644545454545455,1,0;0.650333333333333,1,0;0.656121212121212,1,0;0.661909090909091,1,0;0.667696969696970,1,0;0.673484848484849,1,0;0.679272727272727,1,0;0.685060606060606,1,0;0.690848484848485,1,0;0.696636363636364,1,0;0.702424242424242,1,0;0.708212121212121,1,0;0.714000000000000,1,0;0.716888888888889,0.998494949494950,0;0.719777777777778,0.996989898989899,0;0.722666666666667,0.995484848484849,0;0.725555555555556,0.993979797979798,0;0.728444444444444,0.992474747474748,0;0.731333333333333,0.990969696969697,0;0.734222222222222,0.989464646464647,0;0.737111111111111,0.987959595959596,0;0.740000000000000,0.986454545454546,0;0.742888888888889,0.984949494949495,0;0.745777777777778,0.983444444444445,0;0.748666666666667,0.981939393939394,0;0.751555555555556,0.980434343434343,0;0.754444444444445,0.978929292929293,0;0.757333333333333,0.977424242424242,0;0.760222222222222,0.975919191919192,0;0.763111111111111,0.974414141414141,0;0.766000000000000,0.972909090909091,0;0.768888888888889,0.971404040404040,0;0.771777777777778,0.969898989898990,0;0.774666666666667,0.968393939393939,0;0.777555555555556,0.966888888888889,0;0.780444444444444,0.965383838383838,0;0.783333333333333,0.963878787878788,0;0.786222222222222,0.962373737373737,0;0.789111111111111,0.960868686868687,0;0.792000000000000,0.959363636363636,0;0.794888888888889,0.957858585858586,0;0.797777777777778,0.956353535353535,0;0.800666666666667,0.954848484848485,0;0.803555555555556,0.953343434343434,0;0.806444444444444,0.951838383838384,0;0.809333333333333,0.950333333333333,0;0.812222222222222,0.948828282828283,0;0.815111111111111,0.947323232323232,0;0.818000000000000,0.945818181818182,0;0.820888888888889,0.944313131313131,0;0.823777777777778,0.942808080808081,0;0.826666666666667,0.941303030303030,0;0.829555555555556,0.939797979797980,0;0.832444444444444,0.938292929292929,0;0.835333333333333,0.936787878787879,0;0.838222222222222,0.935282828282828,0;0.841111111111111,0.933777777777778,0;0.844000000000000,0.932272727272727,0;0.846888888888889,0.930767676767677,0;0.849777777777778,0.929262626262626,0;0.852666666666667,0.927757575757576,0;0.855555555555556,0.926252525252525,0;0.858444444444445,0.924747474747475,0;0.861333333333333,0.923242424242424,0;0.864222222222222,0.921737373737374,0;0.867111111111111,0.920232323232323,0;0.870000000000000,0.918727272727273,0;0.872888888888889,0.917222222222222,0;0.875777777777778,0.915717171717172,0;0.878666666666667,0.914212121212121,0;0.881555555555556,0.912707070707071,0;0.884444444444445,0.911202020202020,0;0.887333333333333,0.909696969696970,0;0.890222222222222,0.908191919191919,0;0.893111111111111,0.906686868686869,0;0.896000000000000,0.905181818181818,0;0.898888888888889,0.903676767676768,0;0.901777777777778,0.902171717171717,0;0.904666666666667,0.900666666666667,0;0.907555555555556,0.899161616161616,0;0.910444444444444,0.897656565656566,0;0.913333333333333,0.896151515151515,0;0.916222222222222,0.894646464646465,0;0.919111111111111,0.893141414141414,0;0.922000000000000,0.891636363636364,0;0.924888888888889,0.890131313131313,0;0.927777777777778,0.888626262626263,0;0.930666666666667,0.887121212121212,0;0.933555555555556,0.885616161616162,0;0.936444444444444,0.884111111111111,0;0.939333333333333,0.882606060606061,0;0.942222222222222,0.881101010101010,0;0.945111111111111,0.879595959595960,0;0.948000000000000,0.878090909090909,0;0.950888888888889,0.876585858585859,0;0.953777777777778,0.875080808080808,0;0.956666666666667,0.873575757575758,0;0.959555555555556,0.872070707070707,0;0.962444444444444,0.870565656565657,0;0.965333333333333,0.869060606060606,0;0.968222222222222,0.867555555555556,0;0.971111111111111,0.866050505050505,0;0.974000000000000,0.864545454545455,0;0.976888888888889,0.863040404040404,0;0.979777777777778,0.861535353535354,0;0.982666666666667,0.860030303030303,0;0.985555555555556,0.858525252525253,0;0.988444444444445,0.857020202020202,0;0.991333333333333,0.855515151515152,0;0.994222222222222,0.854010101010101,0;0.997111111111111,0.852505050505050,0;1,0.851000000000000,0;0.999565656565657,0.848030303030303,0;0.999131313131313,0.845060606060606,0;0.998696969696970,0.842090909090909,0;0.998262626262626,0.839121212121212,0;0.997828282828283,0.836151515151515,0;0.997393939393939,0.833181818181818,0;0.996959595959596,0.830212121212121,0;0.996525252525253,0.827242424242424,0;0.996090909090909,0.824272727272727,0;0.995656565656566,0.821303030303030,0;0.995222222222222,0.818333333333333,0;0.994787878787879,0.815363636363636,0;0.994353535353535,0.812393939393939,0;0.993919191919192,0.809424242424242,0;0.993484848484849,0.806454545454545,0;0.993050505050505,0.803484848484849,0;0.992616161616162,0.800515151515152,0;0.992181818181818,0.797545454545455,0;0.991747474747475,0.794575757575758,0;0.991313131313131,0.791606060606061,0;0.990878787878788,0.788636363636364,0;0.990444444444445,0.785666666666667,0;0.990010101010101,0.782696969696970,0;0.989575757575758,0.779727272727273,0;0.989141414141414,0.776757575757576,0;0.988707070707071,0.773787878787879,0;0.988272727272727,0.770818181818182,0;0.987838383838384,0.767848484848485,0;0.987404040404040,0.764878787878788,0;0.986969696969697,0.761909090909091,0;0.986535353535354,0.758939393939394,0;0.986101010101010,0.755969696969697,0;0.985666666666667,0.753000000000000,0;0.985232323232323,0.750030303030303,0;0.984797979797980,0.747060606060606,0;0.984363636363636,0.744090909090909,0;0.983929292929293,0.741121212121212,0;0.983494949494950,0.738151515151515,0;0.983060606060606,0.735181818181818,0;0.982626262626263,0.732212121212121,0;0.982191919191919,0.729242424242424,0;0.981757575757576,0.726272727272727,0;0.981323232323232,0.723303030303030,0;0.980888888888889,0.720333333333333,0;0.980454545454546,0.717363636363636,0;0.980020202020202,0.714393939393939,0;0.979585858585859,0.711424242424242,0;0.979151515151515,0.708454545454545,0;0.978717171717172,0.705484848484849,0;0.978282828282828,0.702515151515152,0;0.977848484848485,0.699545454545455,0;0.977414141414141,0.696575757575758,0;0.976979797979798,0.693606060606061,0;0.976545454545455,0.690636363636364,0;0.976111111111111,0.687666666666667,0;0.975676767676768,0.684696969696970,0;0.975242424242424,0.681727272727273,0;0.974808080808081,0.678757575757576,0;0.974373737373737,0.675787878787879,0;0.973939393939394,0.672818181818182,0;0.973505050505050,0.669848484848485,0;0.973070707070707,0.666878787878788,0;0.972636363636364,0.663909090909091,0;0.972202020202020,0.660939393939394,0;0.971767676767677,0.657969696969697,0;0.971333333333333,0.655000000000000,0;0.970898989898990,0.652030303030303,0;0.970464646464647,0.649060606060606,0;0.970030303030303,0.646090909090909,0;0.969595959595960,0.643121212121212,0;0.969161616161616,0.640151515151515,0;0.968727272727273,0.637181818181818,0;0.968292929292929,0.634212121212121,0;0.967858585858586,0.631242424242424,0;0.967424242424242,0.628272727272727,0;0.966989898989899,0.625303030303030,0;0.966555555555556,0.622333333333333,0;0.966121212121212,0.619363636363636,0;0.965686868686869,0.616393939393939,0;0.965252525252525,0.613424242424242,0;0.964818181818182,0.610454545454546,0;0.964383838383838,0.607484848484849,0;0.963949494949495,0.604515151515152,0;0.963515151515151,0.601545454545455,0;0.963080808080808,0.598575757575758,0;0.962646464646465,0.595606060606061,0;0.962212121212121,0.592636363636364,0;0.961777777777778,0.589666666666667,0;0.961343434343434,0.586696969696970,0;0.960909090909091,0.583727272727273,0;0.960474747474748,0.580757575757576,0;0.960040404040404,0.577787878787879,0;0.959606060606061,0.574818181818182,0;0.959171717171717,0.571848484848485,0;0.958737373737374,0.568878787878788,0;0.958303030303030,0.565909090909091,0;0.957868686868687,0.562939393939394,0;0.957434343434343,0.559969696969697,0;0.957000000000000,0.557000000000000,0;0.957434343434343,0.554151515151515,0;0.957868686868687,0.551303030303030,0;0.958303030303030,0.548454545454546,0;0.958737373737374,0.545606060606061,0;0.959171717171717,0.542757575757576,0;0.959606060606061,0.539909090909091,0;0.960040404040404,0.537060606060606,0;0.960474747474748,0.534212121212121,0;0.960909090909091,0.531363636363636,0;0.961343434343434,0.528515151515152,0;0.961777777777778,0.525666666666667,0;0.962212121212121,0.522818181818182,0;0.962646464646465,0.519969696969697,0;0.963080808080808,0.517121212121212,0;0.963515151515151,0.514272727272727,0;0.963949494949495,0.511424242424242,0;0.964383838383838,0.508575757575758,0;0.964818181818182,0.505727272727273,0;0.965252525252525,0.502878787878788,0;0.965686868686869,0.500030303030303,0;0.966121212121212,0.497181818181818,0;0.966555555555556,0.494333333333333,0;0.966989898989899,0.491484848484849,0;0.967424242424242,0.488636363636364,0;0.967858585858586,0.485787878787879,0;0.968292929292929,0.482939393939394,0;0.968727272727273,0.480090909090909,0;0.969161616161616,0.477242424242424,0;0.969595959595960,0.474393939393939,0;0.970030303030303,0.471545454545455,0;0.970464646464647,0.468696969696970,0;0.970898989898990,0.465848484848485,0;0.971333333333333,0.463000000000000,0;0.971767676767677,0.460151515151515,0;0.972202020202020,0.457303030303030,0;0.972636363636364,0.454454545454546,0;0.973070707070707,0.451606060606061,0;0.973505050505050,0.448757575757576,0;0.973939393939394,0.445909090909091,0;0.974373737373737,0.443060606060606,0;0.974808080808081,0.440212121212121,0;0.975242424242424,0.437363636363636,0;0.975676767676768,0.434515151515152,0;0.976111111111111,0.431666666666667,0;0.976545454545455,0.428818181818182,0;0.976979797979798,0.425969696969697,0;0.977414141414141,0.423121212121212,0;0.977848484848485,0.420272727272727,0;0.978282828282828,0.417424242424243,0;0.978717171717172,0.414575757575758,0;0.979151515151515,0.411727272727273,0;0.979585858585859,0.408878787878788,0;0.980020202020202,0.406030303030303,0;0.980454545454546,0.403181818181818,0;0.980888888888889,0.400333333333333,0;0.981323232323232,0.397484848484849,0;0.981757575757576,0.394636363636364,0;0.982191919191919,0.391787878787879,0;0.982626262626263,0.388939393939394,0;0.983060606060606,0.386090909090909,0;0.983494949494950,0.383242424242424,0;0.983929292929293,0.380393939393939,0;0.984363636363636,0.377545454545455,0;0.984797979797980,0.374696969696970,0;0.985232323232323,0.371848484848485,0;0.985666666666667,0.369000000000000,0;0.986101010101010,0.366151515151515,0;0.986535353535354,0.363303030303030,0;0.986969696969697,0.360454545454545,0;0.987404040404040,0.357606060606061,0;0.987838383838384,0.354757575757576,0;0.988272727272727,0.351909090909091,0;0.988707070707071,0.349060606060606,0;0.989141414141414,0.346212121212121,0;0.989575757575758,0.343363636363636,0;0.990010101010101,0.340515151515152,0;0.990444444444445,0.337666666666667,0;0.990878787878788,0.334818181818182,0;0.991313131313131,0.331969696969697,0;0.991747474747475,0.329121212121212,0;0.992181818181818,0.326272727272727,0;0.992616161616162,0.323424242424242,0;0.993050505050505,0.320575757575758,0;0.993484848484849,0.317727272727273,0;0.993919191919192,0.314878787878788,0;0.994353535353535,0.312030303030303,0;0.994787878787879,0.309181818181818,0;0.995222222222222,0.306333333333333,0;0.995656565656566,0.303484848484849,0;0.996090909090909,0.300636363636364,0;0.996525252525253,0.297787878787879,0;0.996959595959596,0.294939393939394,0;0.997393939393939,0.292090909090909,0;0.997828282828283,0.289242424242424,0;0.998262626262626,0.286393939393939,0;0.998696969696970,0.283545454545455,0;0.999131313131313,0.280696969696970,0;0.999565656565657,0.277848484848485,0;1,0.275000000000000,0;1,0.272222222222222,0;1,0.269444444444445,0;1,0.266666666666667,0;1,0.263888888888889,0;1,0.261111111111111,0;1,0.258333333333333,0;1,0.255555555555556,0;1,0.252777777777778,0;1,0.250000000000000,0;1,0.247222222222222,0;1,0.244444444444444,0;1,0.241666666666667,0;1,0.238888888888889,0;1,0.236111111111111,0;1,0.233333333333333,0;1,0.230555555555556,0;1,0.227777777777778,0;1,0.225000000000000,0;1,0.222222222222222,0;1,0.219444444444444,0;1,0.216666666666667,0;1,0.213888888888889,0;1,0.211111111111111,0;1,0.208333333333333,0;1,0.205555555555556,0;1,0.202777777777778,0;1,0.200000000000000,0;1,0.197222222222222,0;1,0.194444444444444,0;1,0.191666666666667,0;1,0.188888888888889,0;1,0.186111111111111,0;1,0.183333333333333,0;1,0.180555555555556,0;1,0.177777777777778,0;1,0.175000000000000,0;1,0.172222222222222,0;1,0.169444444444444,0;1,0.166666666666667,0;1,0.163888888888889,0;1,0.161111111111111,0;1,0.158333333333333,0;1,0.155555555555556,0;1,0.152777777777778,0;1,0.150000000000000,0;1,0.147222222222222,0;1,0.144444444444444,0;1,0.141666666666667,0;1,0.138888888888889,0;1,0.136111111111111,0;1,0.133333333333333,0;1,0.130555555555556,0;1,0.127777777777778,0;1,0.125000000000000,0;1,0.122222222222222,0;1,0.119444444444444,0;1,0.116666666666667,0;1,0.113888888888889,0;1,0.111111111111111,0;1,0.108333333333333,0;1,0.105555555555556,0;1,0.102777777777778,0;1,0.100000000000000,0;1,0.0972222222222222,0;1,0.0944444444444445,0;1,0.0916666666666667,0;1,0.0888888888888889,0;1,0.0861111111111111,0;1,0.0833333333333333,0;1,0.0805555555555556,0;1,0.0777777777777778,0;1,0.0750000000000000,0;1,0.0722222222222222,0;1,0.0694444444444445,0;1,0.0666666666666667,0;1,0.0638888888888889,0;1,0.0611111111111111,0;1,0.0583333333333333,0;1,0.0555555555555556,0;1,0.0527777777777778,0;1,0.0500000000000000,0;1,0.0472222222222223,0;1,0.0444444444444444,0;1,0.0416666666666667,0;1,0.0388888888888889,0;1,0.0361111111111111,0;1,0.0333333333333334,0;1,0.0305555555555556,0;1,0.0277777777777778,0;1,0.0250000000000000,0;1,0.0222222222222222,0;1,0.0194444444444445,0;1,0.0166666666666667,0;1,0.0138888888888889,0;1,0.0111111111111111,0;1,0.00833333333333336,0;1,0.00555555555555559,0;1,0.00277777777777777,0;1,0,0];
% cmap = cmap_extend(cmap, 100);
    
cax = gca;

for i = 1:length(h)
    % plot data on top of grid
    pcolor(XX{i},YY{i},Z(:,:,i),'parent',cax);
    hold on
    
    maxZ = max(max(Z(:,:,i)));
    minZ = min(min(Z(:,:,i)));
    
    
    %Add the horizontal text to each 
    if ~isempty(textHorz)
        text(XC(i),-1.1,textHorz,'HorizontalAlignment','center','FontSize',fontsz);
    end
    
    %check for hexagonal symmetry
    if CS.id~=40
        hnum = h(i).hkl;
    else
        hnum = h(i).hkil;
    end
    
    %fix for -0
    hnum(abs(hnum) < 1e-12) = 0;
    
    htext = ['$$\{$$', sprintf('%.0f', hnum), '$$\}$$'];
    
    
    %add the h labels and max and min
    text(XC(i),1.1,htext,'FontSize',fontsz + 4,'Interpreter','latex',...
        'FontWeight','bold', 'HorizontalAlignment', 'Center')
    
    text(XC(i) - 0.45,  1.00, ['MAX : ',num2str(maxZ,'%.1f')], ...
        'FontSize',fontsz,'Interpreter','latex','HorizontalAlignment','right')
    
    text(XC(i) - 0.45, -1.00, ['MIN : ',num2str(minZ,'%.1f')], ...
        'FontSize',fontsz,'Interpreter','latex','HorizontalAlignment','right')

    if iscell(axisLabel)
        if ~isempty(axisLabel{1})
            text(XC(i) + 1.00, 0, axisLabel{1},'color',[1 1 1], 'Fontweight', 'bold', ...
                'FontSize',fontsz+4,'Interpreter','latex','HorizontalAlignment','right')
        end
        if ~isempty(axisLabel{2})
            text(XC(i), 1.00, axisLabel{2},'color',[1 1 1], 'Fontweight', 'bold', ...
                'FontSize',fontsz+4,'Interpreter','latex','HorizontalAlignment','center','VerticalAlignment','top')
        end
    else
        warning('axisLabel must be a cell!')
    end
    if i==length(h) && iColorBar
        %add a colorbar
        if isempty(CBAR) || size(cmap, 1) < (MAX_CBAR + 1)
            CBAR = size(cmap, 1);
        end
        
        NBAR = CBAR + 1;
        
        MBAR = NBAR;
        if MBAR > (MAX_CBAR + 1)
            MBAR = (MAX_CBAR + 1);
        end
        
        ZBAR = repmat(linspace(cbound(1), cbound(2), NBAR)',1,2);
        
        XBAR = repmat([0 0.25], NBAR, 1);
        YBAR = repmat(linspace(-1, 1, NBAR)', 1, 2);
        
        YMBAR = linspace(-1, 1, MBAR)';
        YMBAR = (YMBAR(2:end) + YMBAR(1:end-1))/2;
        ZMBAR = linspace(cbound(1), cbound(2), MBAR-1)';
        
        XBAR = XBAR + XC(end);
        
        pcolor(XBAR, YBAR, ZBAR, 'parent',cax);
        
        txtpos = XC(end) - 0.1;
        
        for j = 1:MBAR-1
            text(txtpos, YMBAR(j), num2str(ZMBAR(j),'%.1f'),'FontSize',fontsz,...
                'Interpreter','latex','HorizontalAlignment','right','VerticalAlignment','middle')
        end
    end
end

xlim([-1 XC(end)+0.3])
ylim([-1 1])
colormap(cmap)
caxis(cbound)
shading interp
set(cax,'dataaspectratio',[1 1 1]);
axis off;
hold off

if ~isempty(textVert)
    text(XC(1) - 1.1, 0, textVert, 'Rotation', 90,'HorizontalAlignment','center','FontSize',fontsz,'Interpreter','latex')
end
end


function[Z, rAll] = rcalcPDF(odf, h)
% varargin = {'xAxisDirection', getMTEXpref('xAxisDirection'), 'yAxisDirection', getMTEXpref('yAxisDirection'), 'zAxisDirection', getMTEXpref('zAxisDirection')};
varargin = {};
c = (ones(size(h)));

sR = fundamentalSector(odf.SS,varargin{:});
rAll = plotS2Grid(sR,'resolution',0.25*degree, varargin{:});
rAll = Miller(rAll, odf.CS);

Z  = cell(1,1,length(h));
for i = 1:length(h)
    % compute pole figures
    Z{i} = ensureNonNeg(odf.calcPDF(h(i),rAll,varargin{:},'superposition',c(i)));
    
    Z{i} = reshape(Z{i}(:),size(rAll.rho));
end
Z = cell2mat(Z);
end

function[nmap] = cmap_extend(cmap, n)
m = size(cmap, 1)-1;
nmap = cell(m, 1);

for i = 1:m
    nmap{i} = [linspace(cmap(i,1), cmap(i+1,1), n);
        linspace(cmap(i,2), cmap(i+1,2), n);
        linspace(cmap(i,3), cmap(i+1,3), n)]';
    if i~=m
        nmap{i} = nmap{i}(1:end-1,:);
    end
end

nmap = cell2mat(nmap);
end


function[h] = calcH(CS)
%get h fo each CS
if isequal(CS.id, 45)
    h = {Miller(0,0,1,CS)  Miller(0,1,1,CS)  Miller(1,1,1,CS)};
elseif isequal(CS.id, 40)
    %I forgot this one
    h = {Miller(0,0,0,1,CS)  Miller(1,0,-1,0,CS)  Miller(1,0,-1,1,CS)};
else
    h = {Miller(0,0,1,CS)  Miller(0,1,0,CS)  Miller(1,0,0,CS)};
end
end


function[cMap] = makeColorMap(varargin)
% MAKECOLORMAP makes smoothly varying colormaps
% a = makeColorMap(beginColor, middleColor, endColor, numSteps);
% a = makeColorMap(beginColor, endColor, numSteps);
% a = makeColorMap(beginColor, middleColor, endColor);
% a = makeColorMap(beginColor, endColor);
%
% all colors are specified as RGB triples
% numSteps is a scalar saying howmany points are in the colormap
%
% Examples:
%
% peaks;
% a = makeColorMap([1 0 0],[1 1 1],[0 0 1],40);
% colormap(a)
% colorbar
%
% peaks;
% a = makeColorMap([1 0 0],[0 0 1],40);
% colormap(a)
% colorbar
%
% peaks;
% a = makeColorMap([1 0 0],[1 1 1],[0 0 1]);
% colormap(a)
% colorbar
%
% peaks;
% a = makeColorMap([1 0 0],[0 0 1]);
% colormap(a)
% colorbar

% Reference:
% A. Light & P.J. Bartlein, "The End of the Rainbow? Color Schemes for
% Improved Data Graphics," Eos,Vol. 85, No. 40, 5 October 2004.
% http://geography.uoregon.edu/datagraphics/EOS/Light&Bartlein_EOS2004.pdf

defaultNum = 128;
errorMessage = 'See help MAKECOLORMAP for correct input arguments';


sz = cellfun('prodofsize',varargin);

constraits = vertcat(varargin{sz == 3});
steps = [varargin{sz == 1}];

numcstr = size(constraits,1);
numsteps = numel(steps);

if numsteps < 1
    steps = round(diff(linspace(1,defaultNum+1,numcstr)));
elseif numsteps == 1
    steps = round(diff(linspace(1,steps+1,numcstr)));
elseif numsteps > numcstr-1
    steps = steps(1:numcstr-1);
elseif numcstr-1 ~= numsteps
    steps = round(diff(linspace(1,defaultNum+1,numcstr)));
end

steps(1:end-1) = steps(1:end-1)+1;

cMap = [];
for k=1:numcstr-1
    cMap = [cMap(1:end-1,:) ;
        interpMap(constraits(k,:), constraits(k+1,:), steps(k))];
end

% size(cMap)
% return
% if nargin == 2 %endPoints of colormap only
%     color.start  = varargin{1};
%     color.middle = [];
%     color.end    = varargin{2};
%     color.num    = defaultNum;
% elseif nargin == 4 %endPoints, midPoint, and N defined
%     color.start  = varargin{1};
%     color.middle = varargin{2};
%     color.end    = varargin{3};
%     color.num    = varargin{4};
% elseif nargin == 3 %endPoints and num OR endpoints and Mid
%     if numel(varargin{3}) == 3 %color
%         color.start  = varargin{1};
%         color.middle = varargin{2};
%         color.end    = varargin{3};
%         color.num    = defaultNum;
%     elseif numel(varargin{3}) == 1 %numPoints
%         color.start  = varargin{1};
%         color.middle = [];
%         color.end    = varargin{2};
%         color.num    = varargin{3};
%     else
%         error(errorMessage)
%     end
% else
%     error(errorMessage)
% end
%
% if color.num <= 1
%     error(errorMessage)
% end
%
% if isempty(color.middle) %no midPoint
%     cMap = interpMap(color.start, color.end, color.num);
% else %midpointDefined
%     [topN, botN] = sizePartialMaps(color.num);
%     cMapTop = interpMap(color.start, color.middle, topN);
%     cMapBot = interpMap(color.middle, color.end, botN);
%     cMap = [cMapTop(1:end-1,:); cMapBot];
% end


    function cMap = interpMap(colorStart, colorEnd, n)
        
        for i = 1:3
            cMap(1:n,i) = linspace(colorStart(i), colorEnd(i), n);
        end
        
    end

    function [topN, botN] = sizePartialMaps(n)
        n = n + 1;
        
        topN =  ceil(n/2);
        botN = floor(n/2);
        % Copyright 2008 - 2009 The MathWorks, Inc.
    end
end

function map = WhiteJetColorMap(n)
% ----------------------------------------------------------------------- %
% Default mtex colormap
% ----------------------------------------------------------------------- %

if nargin <1, n  = 100; end

n  =  round([15 40 25 13 7]./100*n);

map = makeColorMap([1  1  1 ],n(1),[0  0 .7],n(2),...
                   [0  .85 .65],n(3),[1  1 0 ],n(4),...
                   [1 0 0],n(5), [.5 0 0 ]);
end

function map = LaboTeXColorMap
% return LaboTeX colormap

map = makeColorMap([1 1 1],[1 0.4 0.4],[0.4 0 0]);

end

function map = TSLColorMap()
% return TSL colormap
map = [0,0,1;
        0,0.569,0.427;
        0.141,1,0;
        0.714,1,0;
        1,0.851,0;
        0.957,0.557,0;
        1,0.275,0;
        1,0,0];
end

